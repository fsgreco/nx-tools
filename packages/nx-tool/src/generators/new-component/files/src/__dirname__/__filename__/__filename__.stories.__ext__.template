import React from 'react';
<% if (language === 'ts') { %>
import type { Meta, StoryObj } from '@storybook/react';
<% } %>
import { within, expect } from '@storybook/test';
<% if (asyncStory) { %>
import { rest } from 'msw';
<% } %>

/** The component to be rendered */
import { <%= name %> } from './<%= filename %>';

<% if (language === 'ts') { %>
/** Infered types  */
type MetaTypes = Meta<typeof <%= name %>>
type Story = StoryObj<typeof <%= name %>>;
<% } %>


const meta<%- language === 'ts' ? ': MetaTypes' : '' %> = {
  component: <%= name %>,
  title: '<%= name %>/Normal',
	tags: ['autodocs'], // ðŸ‘ˆ empty this to remove auto documentation (alternatively enable "expanded" controls bellow)
  parameters: {
		// controls: { expanded: true }, // https://storybook.js.org/docs/essentials/controls#configuration
    docs: { // https://storybook.js.org/docs/api/doc-block-description
			toc: true, // ðŸ‘ˆ Enables the table of contents
      description: {
        component: 'This is a <%= name %> with "small" size as default',
      },
    },
  },
	/* In case you need redux store integration
	// https://storybook.js.org/tutorials/intro-to-storybook/react/en/data/
	decorators: [(story) => {
		return <Provider store={store}>{story()}</Provider>
	}],
	*/
  argTypes: { // https://storybook.js.org/docs/api/arg-types
    /*
    size: {
      control: 'inline-radio',
      options: ['small', 'middle', 'large'],
      defaultValue: 'small',
			description: "The size of the component"
    },
    data: { 
			control: 'object', 
			description: 'The data that will be rendered' 
		},
		*/
  },
  args: { // https://storybook.js.org/docs/writing-stories/args
		label: "Hello",
  },
};
export default meta;

/**
 * Shows a <%= name %> with different label
 */
export const Primary<%- language === 'ts' ? ': Story' : '' %> = {
  args: { label: "Hello World" },
}; 

/**
 * Testing Component with play async function
 */
export const Testing<%- language === 'ts' ? ': Story' : '' %> = {
  args: {},
	parameters: { docs: { disable: true } },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/Hello <%= name %>/gi)).toBeTruthy();
  },
};

<% if (asyncStory) { %>

const fakeData = [{key:"1",name:"John",age:32,address:"Street Number 3"}]

/**
 * This simulates an async loading data
 */
export const AsyncLoading<%- language === 'ts' ? ': Story' : '' %> = {
	args: {},
  parameters: {
    msw: {
      handlers: [
        rest.get('/api/users', (req, res, ctx) => res( ctx.delay(1000), ctx.json(fakeData)) ),
      ],
    },
  },
  render: function Render(args) {
    const [data, setData] = React.useState();
    React.useEffect(() => {
      fetch('/api/users')
        .then((res) => res.json())
        .then((result) => setData(result));
    }, []);
    return <<%= name %> data={data} {...args} />;
  },
};
<% } %>
